version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: jira_postgres
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: Dockerfile.api
    container_name: jira_api
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "4000:4000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 15s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: ..
      dockerfile: Dockerfile.worker
    container_name: jira_worker
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
      temporal:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ..
      dockerfile: Dockerfile.web
    container_name: jira_web
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    restart: unless-stopped

  temporal:
    image: temporalio/server:1.20.1
    container_name: jira_temporal
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SEEDS=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - "7233:7233"
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5

  temporal-ui:
    image: temporalio/ui:2.21.2
    container_name: jira_temporal_ui
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
    depends_on:
      temporal:
        condition: service_healthy
    ports:
      - "8080:8080"

  traefik:
    image: traefik:v2.11
    container_name: jira_traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      - ./traefik/traefik.yml:/etc/traefik/dynamic.yml:ro
    env_file:
      - .env
    restart: unless-stopped

volumes:
  postgres_data:
  traefik_letsencrypt:
