generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum CredentialType {
  LOCAL
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  displayName String
  role       Role     @default(USER)
  credential Credential?
  issues    Issue[]
  summaries DailySummary[]
  projectLinks UserProjectLink[]
  sitesCreated JiraSite[] @relation("SiteCreator")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Credential {
  id         String          @id @default(uuid())
  type       CredentialType
  secretHash String
  user       User            @relation(fields: [userId], references: [id])
  userId     String          @unique
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Issue {
  id          String   @id @default(uuid())
  jiraId      String   @unique
  key         String
  summary     String?
  status      String
  assignee    User?    @relation(fields: [assigneeId], references: [id])
  assigneeId  String?
  worklogs    Worklog[]
  comments    Comment[]
  sprint      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  jiraId    String   @unique
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   String
  author    String
  body      String
  createdAt DateTime @default(now())
}

model Worklog {
  id          String   @id @default(uuid())
  jiraId      String   @unique
  issue       Issue    @relation(fields: [issueId], references: [id])
  issueId     String
  author      String
  description String?
  timeSpent   Int
  loggedAt    DateTime
  createdAt   DateTime @default(now())
}

model DailySummary {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  yesterday String?
  today     String?
  blockers  String?
  generatedAt DateTime @default(now())
}

model JiraSite {
  id             String      @id @default(uuid())
  alias          String      @unique
  baseUrl        String      @unique
  adminEmail     String
  tokenCipher    String
  createdBy      User?       @relation("SiteCreator", fields: [createdById], references: [id])
  createdById    String?
  projects       JiraProject[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model JiraProject {
  id           String           @id @default(uuid())
  jiraId       String
  key          String
  name         String
  site         JiraSite         @relation(fields: [siteId], references: [id])
  siteId       String
  isActive     Boolean          @default(true)
  accountLinks UserProjectLink[]
  trackedUsers ProjectTrackedUser[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([siteId, jiraId])
  @@unique([siteId, key])
}

model UserProjectLink {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  project       JiraProject @relation(fields: [projectId], references: [id])
  projectId     String
  jiraAccountId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, projectId])
}

model ProjectTrackedUser {
  id           String       @id @default(uuid())
  project      JiraProject  @relation(fields: [projectId], references: [id])
  projectId    String
  jiraAccountId String
  displayName  String
  email        String?
  avatarUrl    String?
  isTracked    Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([projectId, jiraAccountId])
}
