generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum CredentialType {
  LOCAL
}

enum SyncJobStatus {
  ACTIVE
  PAUSED
  ERROR
}

enum SyncStatus {
  IDLE
  RUNNING
  SUCCESS
  FAILED
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  displayName String
  role        Role     @default(USER)
  credential  Credential?
  summaries   DailySummary[]
  projectLinks UserProjectLink[]
  sitesCreated JiraSite[] @relation("SiteCreator")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Credential {
  id         String          @id @default(uuid())
  type       CredentialType
  secretHash String
  user       User            @relation(fields: [userId], references: [id])
  userId     String          @unique
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model JiraUser {
  id            String   @id @default(uuid())
  accountId     String   @unique
  displayName   String
  email         String?
  avatarUrl     String?
  issuesAssignee Issue[] @relation("IssueAssignee")
  comments      Comment[] @relation("CommentAuthor")
  worklogs      Worklog[] @relation("WorklogAuthor")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model JiraSite {
  id             String      @id @default(uuid())
  alias          String      @unique
  baseUrl        String      @unique
  adminEmail     String
  tokenCipher    String
  createdBy      User?       @relation("SiteCreator", fields: [createdById], references: [id])
  createdById    String?
  projects       JiraProject[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model JiraProject {
  id           String            @id @default(uuid())
  jiraId       String
  key          String
  name         String
  site         JiraSite          @relation(fields: [siteId], references: [id])
  siteId       String
  isActive     Boolean           @default(true)
  accountLinks UserProjectLink[]
  trackedUsers ProjectTrackedUser[]
  issues       Issue[]
  syncJob      SyncJob?
  syncStates   SyncState[]
  syncLogs     SyncLog[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@unique([siteId, jiraId])
  @@unique([siteId, key])
}

model ProjectTrackedUser {
  id            String      @id @default(uuid())
  project       JiraProject @relation(fields: [projectId], references: [id])
  projectId     String
  jiraAccountId String
  displayName   String
  email         String?
  avatarUrl     String?
  isTracked     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([projectId, jiraAccountId])
}

model Sprint {
  id        String   @id @default(uuid())
  jiraId    String   @unique
  name      String
  state     String
  startDate DateTime?
  endDate   DateTime?
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id            String      @id @default(uuid())
  jiraId        String      @unique
  key           String
  project       JiraProject @relation(fields: [projectId], references: [id])
  projectId     String
  summary       String?
  status        String
  priority      String?
  assignee      JiraUser?   @relation("IssueAssignee", fields: [assigneeId], references: [id])
  assigneeId    String?
  sprint        Sprint?     @relation(fields: [sprintId], references: [id])
  sprintId      String?
  jiraCreatedAt DateTime
  jiraUpdatedAt DateTime
  remoteData    Json?
  comments      Comment[]
  worklogs      Worklog[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Comment {
  id            String   @id @default(uuid())
  jiraId        String   @unique
  issue         Issue    @relation(fields: [issueId], references: [id])
  issueId       String
  author        JiraUser @relation("CommentAuthor", fields: [authorId], references: [id])
  authorId      String
  body          String
  jiraCreatedAt DateTime
  jiraUpdatedAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Worklog {
  id            String   @id @default(uuid())
  jiraId        String   @unique
  issue         Issue    @relation(fields: [issueId], references: [id])
  issueId       String
  author        JiraUser @relation("WorklogAuthor", fields: [authorId], references: [id])
  authorId      String
  description   String?
  timeSpent     Int
  jiraStartedAt DateTime
  jiraUpdatedAt DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserProjectLink {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  project       JiraProject @relation(fields: [projectId], references: [id])
  projectId     String
  jiraAccountId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, projectId])
}

model DailySummary {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  yesterday   String?
  today       String?
  blockers    String?
  generatedAt DateTime @default(now())
}

model SyncJob {
  id           String        @id @default(uuid())
  project      JiraProject   @relation(fields: [projectId], references: [id])
  projectId    String        @unique
  workflowId   String        @unique
  scheduleId   String        @unique
  cronSchedule String
  status       SyncJobStatus @default(ACTIVE)
  lastRunAt    DateTime?
  nextRunAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model SyncState {
  id           String      @id @default(uuid())
  project      JiraProject @relation(fields: [projectId], references: [id])
  projectId    String
  entity       String
  lastSyncTime DateTime?
  status       SyncStatus  @default(IDLE)
  metadata     Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([projectId, entity])
}

model SyncLog {
  id        String      @id @default(uuid())
  project   JiraProject @relation(fields: [projectId], references: [id])
  projectId String
  level     String
  message   String
  details   Json?
  createdAt DateTime    @default(now())
}
