generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  email        String            @unique
  displayName  String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  role         Role              @default(USER)
  credential   Credential?
  summaries    DailySummary[]
  sitesCreated JiraSite[]        @relation("SiteCreator")
  projectLinks UserProjectLink[]
  performanceNotes PerformanceReviewNote[] @relation("PerformanceNoteManager")
}

model Credential {
  id         String         @id @default(uuid())
  type       CredentialType
  secretHash String
  userId     String         @unique
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id])
}

model JiraUser {
  id             String    @id @default(uuid())
  accountId      String    @unique
  displayName    String
  email          String?
  avatarUrl      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  comments       Comment[] @relation("CommentAuthor")
  issuesAssignee Issue[]   @relation("IssueAssignee")
  worklogs       Worklog[] @relation("WorklogAuthor")
}

model JiraSite {
  id          String        @id @default(uuid())
  alias       String        @unique
  baseUrl     String        @unique
  adminEmail  String
  tokenCipher String
  createdById String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projects    JiraProject[]
  createdBy   User?         @relation("SiteCreator", fields: [createdById], references: [id])
}

model JiraProject {
  id           String               @id @default(uuid())
  jiraId       String
  key          String
  name         String
  siteId       String
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  summaries    DailySummary[]
  issues       Issue[]
  site         JiraSite             @relation(fields: [siteId], references: [id])
  trackedUsers ProjectTrackedUser[]
  syncJob      SyncJob?
  syncLogs     SyncLog[]
  syncStates   SyncState[]
  accountLinks UserProjectLink[]
  performanceNotes PerformanceReviewNote[]

  @@unique([siteId, jiraId])
  @@unique([siteId, key])
}

model ProjectTrackedUser {
  id            String      @id @default(uuid())
  projectId     String
  jiraAccountId String
  displayName   String
  email         String?
  avatarUrl     String?
  isTracked     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  project       JiraProject @relation(fields: [projectId], references: [id])
  performanceNotes PerformanceReviewNote[]

  @@unique([projectId, jiraAccountId])
}

model Sprint {
  id        String    @id @default(uuid())
  jiraId    String    @unique
  name      String
  state     String
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  issues    Issue[]
}

model Issue {
  id            String      @id @default(uuid())
  jiraId        String      @unique
  key           String
  summary       String?
  status        String
  assigneeId    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  jiraCreatedAt DateTime
  jiraUpdatedAt DateTime
  priority      String?
  projectId     String
  remoteData    Json?
  sprintId      String?
  comments      Comment[]
  assignee      JiraUser?   @relation("IssueAssignee", fields: [assigneeId], references: [id])
  project       JiraProject @relation(fields: [projectId], references: [id])
  sprint        Sprint?     @relation(fields: [sprintId], references: [id])
  worklogs      Worklog[]
}

model Comment {
  id            String    @id @default(uuid())
  jiraId        String    @unique
  issueId       String
  body          String
  createdAt     DateTime  @default(now())
  authorId      String
  jiraCreatedAt DateTime
  jiraUpdatedAt DateTime?
  updatedAt     DateTime  @updatedAt
  author        JiraUser  @relation("CommentAuthor", fields: [authorId], references: [id])
  issue         Issue     @relation(fields: [issueId], references: [id])
}

model Worklog {
  id            String   @id @default(uuid())
  jiraId        String   @unique
  issueId       String
  description   String?
  timeSpent     Int
  createdAt     DateTime @default(now())
  authorId      String
  jiraStartedAt DateTime
  jiraUpdatedAt DateTime
  updatedAt     DateTime @updatedAt
  author        JiraUser @relation("WorklogAuthor", fields: [authorId], references: [id])
  issue         Issue    @relation(fields: [issueId], references: [id])
}

model UserProjectLink {
  id            String      @id @default(uuid())
  userId        String
  projectId     String
  jiraAccountId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  project       JiraProject @relation(fields: [projectId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model DailySummary {
  id        String      @id @default(uuid())
  userId    String
  yesterday String?
  today     String?
  blockers  String?
  date      DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  projectId String
  project   JiraProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, projectId, date])
}

model PerformanceReviewNote {
  id             String             @id @default(uuid())
  projectId      String
  trackedUserId  String
  managerId      String
  startDate      DateTime
  endDate        DateTime
  markdown       String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  project        JiraProject        @relation(fields: [projectId], references: [id])
  trackedUser    ProjectTrackedUser @relation(fields: [trackedUserId], references: [id])
  manager        User               @relation("PerformanceNoteManager", fields: [managerId], references: [id])

  @@unique([projectId, trackedUserId, managerId, startDate, endDate])
}

model SyncJob {
  id           String        @id @default(uuid())
  projectId    String        @unique
  workflowId   String        @unique
  scheduleId   String        @unique
  cronSchedule String
  status       SyncJobStatus @default(ACTIVE)
  lastRunAt    DateTime?
  nextRunAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  project      JiraProject   @relation(fields: [projectId], references: [id])
}

model SyncState {
  id           String      @id @default(uuid())
  projectId    String
  entity       String
  lastSyncTime DateTime?
  status       SyncStatus  @default(IDLE)
  metadata     Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  project      JiraProject @relation(fields: [projectId], references: [id])

  @@unique([projectId, entity])
}

model SyncLog {
  id        String      @id @default(uuid())
  projectId String
  level     String
  message   String
  details   Json?
  createdAt DateTime    @default(now())
  project   JiraProject @relation(fields: [projectId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum CredentialType {
  LOCAL
}

enum SyncJobStatus {
  ACTIVE
  PAUSED
  ERROR
}

enum SyncStatus {
  IDLE
  RUNNING
  SUCCESS
  FAILED
}
